function [Y,Xf,Af] = myNeuralNetworkFunction(X,~,~)
%MYNEURALNETWORKFUNCTION neural network simulation function.
%
% Generated by Neural Network Toolbox function genFunction, 14-Dec-2020 23:42:38.
% 
% [Y] = myNeuralNetworkFunction(X,~,~) takes these arguments:
% 
%   X = 1xTS cell, 1 inputs over TS timsteps
%   Each X{1,ts} = 3xQ matrix, input #1 at timestep ts.
% 
% and returns:
%   Y = 1xTS cell of 1 outputs over TS timesteps.
%   Each Y{1,ts} = 1xQ matrix, output #1 at timestep ts.
% 
% where Q is number of samples (or series) and TS is the number of timesteps.

%#ok<*RPMT0>

  % ===== NEURAL NETWORK CONSTANTS =====
  
  % Input 1
  x1_step1_xoffset = [-14.482959341036;-36.8708357937793;-14.482959341036];
  x1_step1_gain = [0.0818201912084891;0.0262089696162693;0.0818201912084891];
  x1_step1_ymin = -1;
  
  % Layer 1
  b1 = [-2.2943008502133244;-5.8334021837928258;1.0004184928894579;-1.2641487814466137;-0.77707178200510785;0.26493748371338577;-3.8790307645560977;2.6494243310430448;-1.0513320867015847;4.1946583023358235];
  IW1_1 = [2.9354940775223062 1.3596712109624209 1.419026579379586;1.011146498506948 5.2845514526644282 -2.8948628616964287;-2.9784894775321442 -0.12995297321398247 0.52582083125574131;1.20144602466809 -2.5227819678850198 1.6824107158043407;1.5865904488202733 0.93152448786540509 2.2033850507626367;-0.8487468177313412 -2.8977181106524603 2.6640989330748499;-4.1060945339827244 -0.58389733363059926 0.020390001474110173;1.5973714900401901 0.48954395434786396 0.90199028987152363;3.7633610301435807 2.1369578185413549 2.0972367025800858;1.8068145648233354 1.46411352734294 -1.4070680499191945];
  
  % Layer 2
  b2 = -0.5944239322846766;
  LW2_1 = [0.11218906609091117 -0.68536196166654317 0.21529414308943934 0.033436877515746068 -0.074982688589220498 0.010030714544509253 0.60474153595005475 0.81880756054007631 0.11164863413479548 -0.32743987611010811];
  
  % Output 1
  y1_step1_ymin = -1;
  y1_step1_gain = 0.0262089696162693;
  y1_step1_xoffset = -36.8708357937793;
  
  % ===== SIMULATION ========
  
  % Format Input Arguments
  isCellX = iscell(X);
  if ~isCellX, X = {X}; end;
  
  % Dimensions
  TS = size(X,2); % timesteps
  if ~isempty(X)
    Q = size(X{1},2); % samples/series
  else
    Q = 0;
  end
  
  % Allocate Outputs
  Y = cell(1,TS);
  
  % Time loop
  for ts=1:TS
  
    % Input 1
    Xp1 = mapminmax_apply(X{1,ts},x1_step1_gain,x1_step1_xoffset,x1_step1_ymin);
    
    % Layer 1
    a1 = tansig_apply(repmat(b1,1,Q) + IW1_1*Xp1);
    
    % Layer 2
    a2 = repmat(b2,1,Q) + LW2_1*a1;
    
    % Output 1
    Y{1,ts} = mapminmax_reverse(a2,y1_step1_gain,y1_step1_xoffset,y1_step1_ymin);
  end
  
  % Final Delay States
  Xf = cell(1,0);
  Af = cell(2,0);
  
  % Format Output Arguments
  if ~isCellX, Y = cell2mat(Y); end
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings_gain,settings_xoffset,settings_ymin)
  y = bsxfun(@minus,x,settings_xoffset);
  y = bsxfun(@times,y,settings_gain);
  y = bsxfun(@plus,y,settings_ymin);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n)
  a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings_gain,settings_xoffset,settings_ymin)
  x = bsxfun(@minus,y,settings_ymin);
  x = bsxfun(@rdivide,x,settings_gain);
  x = bsxfun(@plus,x,settings_xoffset);
end
